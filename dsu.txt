class disjointSet{
    vector<int> size , parent;
    public:
        disjointSet(int V){
            size.resize(V + 1 , 1);
            parent.resize(V + 1);
            
            for(int i = 0; i <= V; i++){
                parent[i] = i;
            }
        }
        
        int findUParent(int node){
            if(parent[node] == node) return node;
            
            return parent[node] = findUParent(parent[node]);
        }
        
        void unionBySize(int u , int v){
            int pu = findUParent(u) , pv = findUParent(v);
            int su = size[pu] , sv = size[pv];
            if(pu == pv) return; // If they are already in the same component, do nothing
            
            if(su < sv){
                parent[pu] = pv;
                size[pv] += size[pu];
            }
            else{
                parent[pv] = pu;
                size[pu] += size[pv];
            }
        }
};